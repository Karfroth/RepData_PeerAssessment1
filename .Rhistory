doc<-xmlTreeParse(xmlurl2, useInternal=T)
rootNode<-xmlRoot(doc)
fileurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileurl, destfile="forexam1.2.csv")
library(data.table)
DT<-fread(input = "forexam1.2.csv")
DT
DT["pwgtp15"]
DT[,mean(pwgtp15),by=SEX]
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
tapply(DT$pwgtp15,DT$SEX,mean)
a
names(a)
a["VAL"]
a["VAL"]>=14
table(a["VAL"]>=14)
b<-a["VAL"]
complete.cases(b)
complete.cases(b)->c
b
b[c]
b[c==T]
b[c==T,]
a<-b[c==T,]
a>=14
table(a>=14)
table(a>=24)
a<-read.csv("forexam1.1.csv", header=T)
a
b<-a["FES"]
b
table(xpathSApply(rootNode, "//zipcode", xmlValue))
sum(dat$Zip*dat$Ext,na.rm=T)
str(b)
install.packages("JSONLITE")
install.packages("jsonlite")
library(jsonlite)
jsondata<-fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
names(jsondata)
jsondata
names(jsondata)
jsondata["created_at"]
jsondata["name"]
jsondata["name"]->a
jsondata["created_at"]->b
cbind(a,b)
install.packages("RMySQL")
install.packages("RMySQL")
con<-url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode=readLines(con)
close(con)
htmlCode
z<-c(10, 20, 30, 100)
for (i in z){
nchar(htmlCode[i])
}
nchar(htmlCode[10])
for (i in z){
print (nchar(htmlCode[i]))
}
read.fortran(file = "getdata_wksst8110.for")
x<-read.fwf(file="getdata_wksst8110.for")
x<-read.fwf(file="getdata_wksst8110.for", widths=4)
x
x<-read.fwf(file="getdata_wksst8110.for", skip=4)
x<-read.fwf(file="getdata_wksst8110.for", skip=4, widths=c(12,7,4,9,4,9,4,9,4))
x
sum(x[4])
install.packages(RMySQL, type = source)
install.packages("RMySQL", type = source)
library("quantmod", lib.loc="~/R/win-library/3.1")
quantmod()
a<-getSymbols("AMZN", auto.assign=F)
View(a)
with(a, plot(row.names, AMZN.Open))
with(a, plot(row.names, AMZN.Open))
a
clasS(a)
class(a)
b<-as.data.frame(a)
library("quantmod", lib.loc="~/R/win-library/3.1")
a<-getSymbols("AMZN", auto.assign=F)
library("quantmod", lib.loc="~/R/win-library/3.1")
a<-getSymbols("AMZN", auto.assign=F)
a<-as.data.frame(a)
View(a)
with(a, plot(row.names, AMZN.Close))
class(a)
a$nr<-rownames(a)
library("quantmod", lib.loc="~/R/win-library/3.1")
a<-getSymbols("AMZN", auto.assign=F)
a<-as.data.frame(a)
a$nr<-rownames(a)
with(a, plot(row.names, AMZN.Close))
library("quantmod", lib.loc="~/R/win-library/3.1")
a<-getSymbols("AMZN", auto.assign=F)
a<-as.data.frame(a)
a$nr<-rownames(a)
with(a, plot(nr, AMZN.Close))
b
write.csv("sample111.csv")
write.csv(b,"sample111.csv")
library("quantmod", lib.loc="~/R/win-library/3.1")
a<-getSymbols("AMZN", auto.assign=F)
b<-as.data.frame(a)
write.csv(b,"sample111.csv")
msstock<-getSymbols("MSFT", auto.assign=F)
msstock<-getSymbols("MSFT", auto.assign = F)
msstock<-getSymbols("MSFT", auto.assign = F)
write.csv(msstock, "sample111111.csv")
msstock<-as.data.frame(msstock)
write.csv(msstock, "sample111111.csv")
write.csv(msstock, "sample111111.csv")
rownames(msstock)
month(rownames(msstock))
?weekdays
months(rownames(msstock))
msstock$rownames<-rownames(msstock)
as.Date(msstock$rownames)
msstock$rownames<-as.Date(msstock$rownames)
View(msstock)
months(msstock$rownames)
plot(msstock$rownames, msstock$MSFT.Open)
format(msstock$rownames, "%Y")
format(msstock$rownames, "%Y")->a
format(msstock$rownames, "%Y %M")->a
format(msstock$rownames, "%Y %m")->a
split(msstock, a)
split(msstock, a)->b
sapply(b, FUN = function(x){x[length(x)]})
b
tail(b, n = 1)
sapply(b, tail, n=1)
lapply(b, tail, n=1)
lapply(b, tail, n=1)->c
as.data.frame(c)
c
sapply(b, tail, n=1)->c
c
as.data.frame(c)
t(c)
c<-t(c)
c
windows()
library(lattice)
library(datasets)
z<-xyplot(Ozone ~ Wind, data = airquality)
class(z)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
Bodyweight
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, Bodyweight)
xyplot(weight ~ Time | Diet, Bodyweight)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, Bodyweight)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
Bodyweight
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet)
?nlme::
?nlme
dataset
?dataset
?dataset?
?dataset?
?dataset
?datasets
help="datasets"
library(help="datasets")
weight
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight, panel=function(x,y,...){
panel.xyplot(x,y,...)
panel.abline(h=400)})
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth(method="lm")
qplot(votes, rating, data = movies) + geom_smooth(method="auto")
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
x
y
p
x*p
sum(x*p)
p <- c(.1, .2, .3, .4)
x <- 2 : 5
e.x<-sum(p*x)
e.x
(x^2-e.x)*p
sum((x^2-e.x)*p)
sum((x-e.x)^2*p)
sum(p*x^2)-sum(p*x)
sum(p*x^2)-sum(p*x)^2
pA = 0.8
pB = 0.8
pBc = 1 - pB
pAUB = 0.9
pAIB = 0.7
pAcIB = (1 - pAIB)
pAcIB
pA = 0.8
pB = 0.8
pBc = 1 - pB
pAUB = 0.9
pAIB = 0.7
pAcIB = (1 - pAIB)
pAcIBc = (1 - pAIB)
pAcGBc = pAcIBc/pBc
pAcGB = pAcIB/pB
0.75/(1-0.52)
(0.75*0.3)/(0.75*0.3)+((1-0.52)*0.7)
0.75*0.3=a
a=0.75*0.3
1-0.52
b=0.48*0.7
a
b
a/a+b
a/(a+b)
0.7/0.8
1-0.875
x<-1:6
y<-6
x/y
y<-1/6
sum(x*y)
set.seed(1)
x<-rnorm(100)
mean(x)
exp()
exp(1)
exp(inf)
a<-inf
exp(Inf)
exp(-1)
exp(-Inf)
exp(Inf)
integrate(exp(1))
integrate(exp, 0, Inf)
integrate(exp, -Inf, Inf)
integrate(dnorm, -Inf, Inf)
integrate(dnorm, 0, 1)
integrate(dnorm, 0, 20000)
integrate(dnorm, 0, 2000)
integrate(dnorm, 0, Inf)
exp(0)-(((Inf^3)/3)*exp(-Inf))
(((Inf^3)/3)*exp(-Inf))
Inf^3
(Inf^3)/3
((Inf^3)/3)->a
exp(-Inf)
exp(-Inf)->b
a*b
exp(0)
x<-Inf
x<-function(a, b){
(a^2)*(e^-a)}
x(1)
x<-function(a){
(a^2)*exp(-a)}
x(1)
x(2)
x(Inf)
integrate(x, 0, Inf)
debug(x)
integrate(x, 0, Inf)
debug(x)
integrate(x, 0, Inf)
debug(x, condition = Null)
debug(x, condition = null)
debug(x, condition = NULL)
x
x(a)
exp(-Inf)
0*2
(0/-1) - (0/(-1^2)) + 2/(-1^3)
((0/-1) - (0/(-1^2)) + 2/(-1^3))*exp(0)
if(!"activity.csv" %in% list.files("./data/")){
dir.create("data")
fileurl<-"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileurl, destfile = "./data/repdataactivity.zip")
unzip(zipfile = "./data/repdataactivity.zip", exdir = "./data")
rm(fileurl)
}
library(data.table)
activity.data<-as.data.table(read.csv(file = "data//activity.csv", header=T))
activity.data1[, sum(steps), by=date]
sample(1:6)
sample(1:6, replace=T)
sample(1:6,size = 100, replace=T)
sample(1:6,size = 10000, replace=T)
sample(1:6,size = 10000, replace=T)->a
table(a)
table(a)->b
(b*(1:6))/10000
1687*6
sum(b*(1:6))/10000
sample(1:6,size = 50000, replace=T)->a
table(a)
table(a)->b
sum(b*(1:6))/10000
sum(b*(1:6))/50000
sample(1:6,size = 80000, replace=T)->a
table(a)->b
sum(b*(1:6))/80000
library(usingR)
library(usingr)
library(UsingR)
install.packages("UsingR")
library(UsingR)
data(father.son)
x<-father.son$sheight
mean(x)
(mean(x)+c(-1,1)*qnorm(0.975)*sd(x)/sqrt(length(x)))
(mean(x)+c(-1,1)*qnorm(0.975)*sd(x)/sqrt(length(x)))
qnorm(0.957)
qnorm(0.975)
(mean(x)+c(-1,1)*qnorm(0.95)*sd(x)/sqrt(length(x)))
(mean(x)+c(-1,1)*qnorm(0.975)*sd(x)/sqrt(length(x)))
x<-father.son$fheight
(mean(x)+c(-1,1)*qnorm(0.95)*sd(x)/sqrt(length(x)))
x<-10
t<-360
poisson.test(x, T=360)$conf
poisson.test(10*60, 60)
dnorm(x = 93, mean = 100, sd=10)
qnorm(x = 93, mean = 100, sd=10)
qnorm(93, mean = 100, sd=10)
qnorm(93, 100, 10)
dnorm(93, 100, 10)
?qnorm
pnorm(93,100,10)
round(pnorm(93,100,10))
round(pnorm(93,100,10)*100)
0.88*0.95/(0.88*0.95 + 0.12*0.05)
dnorm(0.95, 0, 1)
dnorm(2.33, 0, 1)
dnorm(1.645,0,1)
qnorm(0.95, 100, 10)
qnorm(0.95, 100. sqrt(100/50))
qnorm(0.95, 100, sqrt(100/50))
rexp(40, 0.2)
?rexp
rexp(40,0.2)
rexp(40,0.2)->a
mean(a)
1/0.2
rexp(40, 0.2)
rexp(40, 0.2)
rexp(40, 0.2)->a
mean(a)
var(a)
(1/0.2)^2
rexp(40, 0.2)->a
var(a)
rexp(40, 0.2)->a
var(a)
rexp(40, 0.2)->a
var(a)
barplot(height = a)
hist(x = a)
rexp(40,0.2)->a
mean(a)
var(a)
hist(a)
barplot(a)
replicate(1000000, rexp(n=40, 0.2)
)
replicate(1000, rexp(n=40, 0.2))
replicate(1000, rexp(40, 0.2))
replicate(1000, rexp(40, 0.2))->x
mean(x)
var(x)
class(x)
View(x)
colMeans(x)
a<-colMeans(x)
mean(a)
var(a)
sd(a)
1/0.2
apply(x, 2, var)
hist(a)
apply(x,2,var)
apply(x,2,var)->b
plot(b)
line(y = 25)
abline(h = 25)
exp(0.2)
rexp(40, 0.2)
replicate(rexp(40,0.2), n = 1000)->x
x
head(x)
View(x)
replicate(rexp(40,0.2), n = 1000)->x
a<-apply(x, 2, mean)
mean(a)
summary(a)
qqplot(a)
var
sd(apply(a,2,mean))
sd(a)
sqrt(var(a))
var(a)
a
qqnorm(a)
mean(a)
var(a)
sum(mean(a^2)-(mean(a))^2)
sqrt(sum(mean(a^2)-(mean(a))^2))
sd(a)
sqrt(sum(mean(a^2)-(mean(a))^2))/1000
sum(mean(a^2)-(mean(a))^2)/1000
hist(a)
sqrt(var(a/1000))
var(a)
sqrt(var(a))/sqrt(1000)
1/0.2
sqrt(1/0.2)
a<-1:6
sum(1*a/6)
var(1*a/6)
sum(1*a^2/6)-3.5^2
replicate(n = 1000, rexp(40,0.2))
replicate(n = 1000, rexp(40,0.2))->a
b<-apply(a,2,mean)
b
mean(b)
var(b)
sd(b)
replicate(n = 1000, rexp(n = 1000, rate = 0.2))->a
b<-apply(a,2,mean)
mean(b)
var(b)
sqrt(5)
sqrt(5/1000)
(b-mean(b))/(sd(b)/sqrt(1000))
sum((b-mean(b))/(sd(b)/sqrt(1000)))
apply(a, 2, var)
apply(a, 2, sd)
apply(a, 2, var)/1000
var(b)
apply(a, 2, var)/1000->c
plot(c)
abline(h=mean(c), col="red")
abline(h=mean(c), col="red", pch=2)
abline(h=var(b))
mean(b)+c(-1,1)*qnorm(0.975)*sd(b)/sqrt(length(b))
plot(b)
abline(mean(b)+c(-1,1)*qnorm(0.975)*sd(b)/sqrt(length(b)))
plot(b)
abline(h=mean(b)+c(-1,1)*qnorm(0.975)*sd(b)/sqrt(length(b)))
mean(b)
library(datasets)
iris
toothgrowth
ToothGrowth
summary(ToothGrowth)
?pandoc
system("pandoc -h")
install.packages("latex")
require(knitr)
require(markdown)
setwd("D:/DaumCloud/학교/Coursera/repo/RepData_PeerAssessment1")
markdownToHTML("PA1_template_for_pdf.md", "PA1_template_for_pdf.html", option=c("use_xhml"))
system("pandoc -s PA1_template_for_pdf.html -o PA1_template_for_pdf.pdf")
